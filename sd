import os
import pandas as pd
import numpy as np
import lightgbm as lgb
from sklearn.linear_model import LogisticRegression

output_preds = []

# Initialize counters
model_count = 0
error_count = 0
processed_model_paths = []

models_base_paths = [
    "/notebooks/model data/HAS",
    "/notebooks/model data/TAKE"
]

for base_path in models_base_paths:
    print(f"\nScanning directory: {base_path}")

    for root, dirs, files in os.walk(base_path):
        for file in files:
            if file.endswith(".pkl"):
                model_path = os.path.join(root, file)
                print(f"Found model file: {model_path}")

                try:
                    # Extract product info based on path
                    if "HAS" in base_path:
                        product = root.split("model data/HAS/")[-1].split("/")[0]
                        model_type = "HAS"
                    elif "TAKE" in base_path:
                        product = root.split("model data/TAKE/")[-1].split("/")[0]
                        model_type = "TAKE"
                    else:
                        product = "UNKNOWN"
                        model_type = "UNKNOWN"

                    country = product.split("_")[0].upper()

                    # Load model
                    model_object = pd.read_pickle(model_path)

                    # Get feature count
                    if isinstance(model_object, LogisticRegression):
                        n_features = model_object.coef_.shape[1]
                    elif isinstance(model_object, lgb.LGBMClassifier):
                        n_features = model_object.booster_.num_feature()
                    else:
                        print(f"Unknown model type at {model_path}")
                        continue

                    # Generate dummy data for prediction
                    X_data = np.random.rand(100, n_features)
                    preds = model_object.predict_proba(X_data)[:, 1]

                    # Create result DataFrame
                    pred_df = pd.DataFrame({
                        "uen": np.random.randint(100000, 999999, size=100),
                        "product": product,
                        "country": country,
                        "model_type": model_type,
                        "propensity": preds,
                        "orig_product": product
                    })

                    output_preds.append(pred_df)
                    model_count += 1  # Count success
                    processed_model_paths.append(model_path)

                    print(f"Processed model from: {model_path}")

                except Exception as e:
                    error_count += 1  # Count failure
                    print(f"Error processing {model_path}: {e}")

# Final stats
print(f"\nTotal models successfully processed: {model_count}")
print(f"Total models failed: {error_count}")

print("\nModels processed:")
for path in processed_model_paths:
    print(path)

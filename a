import pickle
import numpy as np
import pandas as pd
from sklearn.datasets import make_classification
import lightgbm as lgb
from sklearn.linear_model import LogisticRegression

# Define model paths
model_paths = ['model1.pkl', 'model2.pkl', 'model3.pkl', 'model4.pkl', 'model5.pkl', 'model6.pkl']
models = []

# Load models from pickle files
for path in model_paths:
    with open(path, 'rb') as f:
        models.append(pickle.load(f))

# Function to create synthetic classification data with a specific number of features
def create_synthetic_data(n_samples=100, n_features=10):
    X, y = make_classification(n_samples=n_samples, n_features=n_features, random_state=42)
    return X, y

# Dictionary to store predictions
predictions = {}

# Automatically extract the number of features from each model and predict
for idx, model in enumerate(models):
    # Extract number of features from the model
    if isinstance(model, LogisticRegression):
        n_features = len(model.coef_[0])  # Coefficients represent the number of features
    elif isinstance(model, lgb.LGBMClassifier):
        n_features = model.booster_.num_feature()  # LightGBM method to get the number of features
    else:
        print(f"Model {idx+1} is not supported. It should be either Logistic Regression or LightGBM.")
        continue
    
    # Generate synthetic data for the current model with the expected number of features
    X_synthetic, y_synthetic = create_synthetic_data(n_samples=100, n_features=n_features)
    
    # Predict using the model
    if isinstance(model, LogisticRegression):
        predictions[f'model_{idx+1}_predictions'] = model.predict(X_synthetic)
    elif isinstance(model, lgb.LGBMClassifier):
        predictions[f'model_{idx+1}_predictions'] = model.predict(X_synthetic)
    
    # Store the true labels for the synthetic data in the DataFrame (we can reuse it)
    predictions['True_Labels'] = y_synthetic

# Store predictions in a DataFrame for easy viewing
predictions_df = pd.DataFrame(predictions)

# Display the first few predictions
print(predictions_df.head())

# Optionally, save the synthetic data and predictions to a CSV file
predictions_df.to_csv('synthetic_data_predictions.csv', index=False)
